from PyQt5.QtWidgets import (QGraphicsTextItem, QWidget, QHBoxLayout, 
                           QFontComboBox, QSpinBox, QToolButton, QColorDialog,
                           QGraphicsItem, QApplication)
from PyQt5.QtGui import (QFont, QPen, QColor, QTextCursor, QPainter, 
                        QCursor, QPixmap, QImage, QTextCharFormat)
from PyQt5.QtCore import Qt, QRectF, QTimer, QBuffer, QPointF
from PIL import Image
import io
from .base_tool import BaseTool

class TextFormatToolbar(QWidget):
    def __init__(self, parent=None):
        super().__init__(None)
        self.setup_ui()
        self.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_ShowWithoutActivating)
        self.text_item = None
        
    def setup_ui(self):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(2)
        
        # Font family combo box
        self.font_combo = QFontComboBox()
        self.font_combo.setCurrentFont(QFont("Arial"))
        self.font_combo.setFixedWidth(150)
        layout.addWidget(self.font_combo)
        
        # Font size spinner
        self.size_spin = QSpinBox()
        self.size_spin.setRange(8, 196)
        self.size_spin.setValue(24)
        self.size_spin.setFixedWidth(50)
        layout.addWidget(self.size_spin)
        
        # Bold button
        self.bold_btn = QToolButton()
        self.bold_btn.setText("B")
        self.bold_btn.setCheckable(True)
        layout.addWidget(self.bold_btn)
        
        # Italic button
        self.italic_btn = QToolButton()
        self.italic_btn.setText("I")
        self.italic_btn.setCheckable(True)
        layout.addWidget(self.italic_btn)
        
        # Cancel button
        self.cancel_btn = QToolButton()
        self.cancel_btn.setText("✕")
        layout.addWidget(self.cancel_btn)
        
        # Apply button
        self.apply_btn = QToolButton()
        self.apply_btn.setText("✓")
        layout.addWidget(self.apply_btn)
        
        self.setFixedHeight(40)

    def focusOutEvent(self, event):
        # When toolbar loses focus, ensure text item stays editable
        if self.text_item and not self.underMouse():
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus()
        super().focusOutEvent(event)

class CustomTextItem(QGraphicsTextItem):
    def __init__(self, tool, parent=None):
        super().__init__(parent)
        self.tool = tool
        self.editing = True
        self.finalized = False
        self.setAcceptHoverEvents(True)
        self.first_click = True
        self.edge_dragging = False
        self.edge_hover = False
        self.edge_margin = 10  # Increased margin for easier edge detection
        
        # Get view scale
        view = self.tool.app.view
        view_scale = view.transform().m11()
        
        # Calculate scale factor based on view scale
        scale_factor = 1.0 / view_scale if view_scale < 1.0 else 1.0
        
        # Apply scaling
        base_font_size = 24
        self.setDefaultTextColor(Qt.black)
        self.setFont(QFont("Arial", int(base_font_size * scale_factor)))
        
        # Set flags for interaction
        self.setTextInteractionFlags(Qt.TextEditorInteraction)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setFlag(QGraphicsItem.ItemIsFocusable)
        self.setFlag(QGraphicsItem.ItemIsSelectable)
        
        # Set initial content
        self.setPlainText("Click to type")
        self.document().contentsChanged.connect(self.updateSize)
        
    def focusInEvent(self, event):
        if not self.finalized:
            if self.first_click and self.toPlainText() == "Click to type":
                self.setPlainText("")
                self.first_click = False
            self.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.editing = True
            self.tool.show_toolbar()
        super().focusInEvent(event)
            
    def focusOutEvent(self, event):
        if not self.finalized:
            # Don't change text interaction flags on focus out
            # Only restore placeholder if needed
            if not self.toPlainText().strip() and not self.first_click:
                self.first_click = True
                self.setPlainText("Click to type")
        super().focusOutEvent(event)
        
    def is_near_edge(self, pos):
        """Check if the position is near any edge of the text item"""
        rect = self.boundingRect()
        return (pos.x() <= self.edge_margin or  # Left edge
                pos.x() >= rect.width() - self.edge_margin or  # Right edge
                pos.y() <= self.edge_margin or  # Top edge
                pos.y() >= rect.height() - self.edge_margin)  # Bottom edge
        
    def hoverMoveEvent(self, event):
        if not self.finalized:
            pos = event.pos()
            if self.is_near_edge(pos):
                self.setCursor(Qt.SizeAllCursor)
                self.edge_hover = True
            else:
                self.setCursor(Qt.IBeamCursor)
                self.edge_hover = False
        super().hoverMoveEvent(event)
        
    def mousePressEvent(self, event):
        if self.finalized:
            if event.button() == Qt.LeftButton:
                super().mousePressEvent(event)
            return
            
        pos = event.pos()
        if event.button() == Qt.LeftButton and self.is_near_edge(pos):
            self.edge_dragging = True
            self.setTextInteractionFlags(Qt.NoTextInteraction)
            self.setCursor(Qt.SizeAllCursor)
            super().mousePressEvent(event)  # Call super to enable dragging
            event.accept()
            return
            
        # Regular text editing click
        self.edge_dragging = False
        self.setTextInteractionFlags(Qt.TextEditorInteraction)
        self.editing = True
        self.setFocus()
        # Make sure the tool knows this is the active text item
        self.tool.text_item = self
        super().mousePressEvent(event)
        event.accept()
        
    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.edge_dragging = False
            pos = event.pos()
            if self.is_near_edge(pos):
                self.setCursor(Qt.SizeAllCursor)
            else:
                self.setCursor(Qt.IBeamCursor)
            # Only restore text interaction if we're not near an edge
            if not self.is_near_edge(pos):
                self.setTextInteractionFlags(Qt.TextEditorInteraction)
        super().mouseReleaseEvent(event)
        
    def mouseMoveEvent(self, event):
        if self.edge_dragging:
            self.setTextInteractionFlags(Qt.NoTextInteraction)
            super().mouseMoveEvent(event)
        elif self.textInteractionFlags() & Qt.TextEditorInteraction:
            super().mouseMoveEvent(event)
        
    def keyPressEvent(self, event):
        if not self.finalized:
            # Ensure text interaction is enabled when typing
            self.setTextInteractionFlags(Qt.TextEditorInteraction)
            super().keyPressEvent(event)
            self.updateSize()
        
    def updateSize(self):
        # Get the ideal width based on content
        self.document().setTextWidth(-1)  # Temporarily remove width constraint
        width = max(50, self.document().idealWidth())  # Minimum 50 pixels
        self.document().setTextWidth(width)
        
        # Calculate height based on document size
        height = self.document().size().height()
        
        # Create a new rect with proper dimensions
        rect = self.boundingRect()
        rect.setHeight(height)
        
        # Update the text item's geometry
        self.setTextWidth(width)
        self.update()
        
    def paint(self, painter, option, widget):
        # Get current scale
        view = self.scene().views()[0]
        view_scale = view.transform().m11()
        
        # Get current text rectangle
        text_rect = self.boundingRect()
        rect = QRectF(text_rect)
        
        # Ensure minimum width
        if rect.width() < 50 / view_scale:
            rect.setWidth(50 / view_scale)
            
        # Draw background
        painter.setBrush(QColor(255, 255, 255, 200))
        painter.setPen(Qt.NoPen)
        painter.drawRect(rect)
        
        # Draw text
        super().paint(painter, option, widget)
        
        # Draw border only if editing and not finalized
        if self.editing and not self.finalized:
            painter.setPen(QPen(Qt.black, 1 / view_scale, Qt.DashLine))
            painter.drawRect(rect)
        
    def hoverEnterEvent(self, event):
        if not self.finalized:
            self.setCursor(Qt.IBeamCursor)
        super().hoverEnterEvent(event)
        
    def hoverLeaveEvent(self, event):
        if not self.finalized:
            self.unsetCursor()
        super().hoverLeaveEvent(event)

class TextTool(BaseTool):
    def __init__(self, app):
        super().__init__(app)
        self.text_item = None
        self.format_toolbar = TextFormatToolbar()
        self.setup_toolbar()
        self.active = False
        self.prevent_deactivation = False  # Add flag to prevent unwanted deactivation
        
    def setup_toolbar(self):
        self.format_toolbar.font_combo.currentFontChanged.connect(self.update_font)
        self.format_toolbar.size_spin.valueChanged.connect(self.update_size)
        self.format_toolbar.bold_btn.toggled.connect(self.update_bold)
        self.format_toolbar.italic_btn.toggled.connect(self.update_italic)
        self.format_toolbar.apply_btn.clicked.connect(self.apply_text)
        self.format_toolbar.cancel_btn.clicked.connect(self.cancel_text)
        
        # Connect to color palette changes
        if hasattr(self.app, 'color_palette'):
            self.app.color_palette.colorChanged.connect(self.update_text_color)
        
    def activate(self):
        """Called when the tool is selected"""
        super().activate()
        self.active = True
        self.prevent_deactivation = True  # Set flag when activating
        
        # Ensure color palette connection is set up
        if hasattr(self.app, 'color_palette'):
            # Disconnect any existing connections to avoid duplicates
            try:
                self.app.color_palette.colorChanged.disconnect(self.update_text_color)
            except:
                pass
            # Connect to color palette changes
            self.app.color_palette.colorChanged.connect(self.update_text_color)

    def deactivate(self):
        """Called when the tool is deselected"""
        if self.prevent_deactivation:  # Only deactivate if allowed
            return
            
        self.active = False
        # Clean up any empty text items
        if self.text_item and not self.text_item.toPlainText().strip():
            self.app.scene.removeItem(self.text_item)
        self.text_item = None
        self.format_toolbar.hide()
        super().deactivate()

    def mouse_press(self, event):
        if not self.active:
            return
            
        self.prevent_deactivation = True
        pos = self.app.view.mapToScene(event.pos())
        item = self.app.scene.itemAt(pos, self.app.view.transform())
        
        if isinstance(item, CustomTextItem):
            if item.finalized:
                event.accept()
                return
                
            # Clicking on an existing text item
            if self.text_item and self.text_item != item:
                # If we have a previous text item, just deactivate it
                self.text_item.editing = False
                
            self.text_item = item
            self.text_item.editing = True
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            if self.text_item.toPlainText() == "Click to type":
                self.text_item.first_click = True
            self.text_item.setFocus()
            self.show_toolbar()
            event.accept()
            return
            
        # Clicking outside any text item
        if self.text_item:
            # Don't immediately deactivate the current text item
            if not self.text_item.toPlainText().strip():
                self.app.scene.removeItem(self.text_item)
                self.text_item = None
        
        # Create new text item
        self.text_item = CustomTextItem(self)
        self.text_item.setPos(pos)
        self.text_item.setDefaultTextColor(self.app.tool_manager.current_color)  # Use the current color from tool manager
        self.app.scene.addItem(self.text_item)
        self.text_item.editing = True
        self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
        self.text_item.setFocus()
        self.show_toolbar()
        event.accept()

    def check_deactivate(self):
        """Don't auto-deactivate - require explicit confirmation"""
        pass

    def apply_text(self):
        """Apply text by rendering it onto the image"""
        self.prevent_deactivation = False  # Allow deactivation when applying
        if self.text_item and self.text_item.toPlainText().strip():
            # Save current state before applying text
            current_state = self.app.image_handler.current_image.copy()
            
            # Get the text item's position and bounds
            scene_pos = self.text_item.scenePos()
            bounds = self.text_item.boundingRect()
            
            # Create a temporary pixmap to render the text
            temp_pixmap = QPixmap(bounds.size().toSize())
            temp_pixmap.fill(Qt.transparent)
            
            # Create painter for the temporary pixmap
            painter = QPainter(temp_pixmap)
            painter.setRenderHint(QPainter.Antialiasing)
            painter.setRenderHint(QPainter.TextAntialiasing)
            
            # Create a copy of the document to preserve color
            doc = self.text_item.document().clone()
            
            # Apply text color to the entire document
            text_color = self.text_item.defaultTextColor()
            text_format = doc.rootFrame().frameFormat()
            char_format = QTextCharFormat()
            char_format.setForeground(text_color)
            cursor = QTextCursor(doc)
            cursor.select(QTextCursor.Document)
            cursor.mergeCharFormat(char_format)
            
            # Draw the document with color
            doc.drawContents(painter, QRectF(0, 0, bounds.width(), bounds.height()))
            painter.end()
            
            # Find the image item in the scene
            image_item = None
            for item in self.app.scene.items():
                if hasattr(item, 'pixmap'):
                    image_item = item
                    break
                    
            if not image_item:
                return
                
            # Create a copy to paint on
            target_pixmap = image_item.pixmap().copy()
            
            # Create painter for the target pixmap
            painter = QPainter(target_pixmap)
            painter.setRenderHint(QPainter.Antialiasing)
            painter.setRenderHint(QPainter.TextAntialiasing)
            
            # Draw the temporary pixmap onto the target at the correct position            painter.drawPixmap(QPointF(scene_pos.x(), scene_pos.y()), temp_pixmap)            painter.end()
            
            # Remove the text item from scene
            self.app.scene.removeItem(self.text_item)
            self.text_item = None
            
            # Update the scene with the new pixmap
            image_item.setPixmap(target_pixmap)
            
            # Convert QPixmap to PIL Image and update image handler
            image = target_pixmap.toImage()
            buffer = QBuffer()
            buffer.open(QBuffer.ReadWrite)
            image.save(buffer, "PNG")
            
            pil_image = Image.open(io.BytesIO(buffer.data()))
            
            # Save the current state before updating
            self.app.image_handler.save_state()
            
            # Update the current image
            self.app.image_handler.current_image = pil_image
            
        else:
            # Remove empty text item
            if self.text_item:
                self.app.scene.removeItem(self.text_item)
                self.text_item = None
        
        # Hide toolbar and deactivate tool
        self.format_toolbar.hide()
        if hasattr(self.app.toolbar, 'text_btn'):
            self.app.toolbar.text_btn.setChecked(False)
        self.app.tool_manager.set_tool(None)

    def cancel_text(self):
        """Cancel current text and deactivate tool"""
        self.prevent_deactivation = False  # Allow deactivation when canceling
        if self.text_item:
            self.app.scene.removeItem(self.text_item)
            self.text_item = None
        self.format_toolbar.hide()
        if hasattr(self.app.toolbar, 'text_btn'):
            self.app.toolbar.text_btn.setChecked(False)
        self.app.tool_manager.set_tool(None)

    def show_toolbar(self):
        if not self.text_item:
            return
            
        # Set reference to current text item
        self.format_toolbar.text_item = self.text_item
        
        # Get the scene view and its viewport
        view = self.app.view
        
        # Position toolbar at the top of the image, centered horizontally
        scene_rect = view.sceneRect()
        view_rect = view.viewport().rect()
        view_top_left = view.mapToGlobal(view.viewport().rect().topLeft())
        
        # Calculate horizontal position to center the toolbar
        toolbar_width = self.format_toolbar.sizeHint().width()
        x_pos = view_top_left.x() + (view_rect.width() - toolbar_width) // 2
        
        # Position at top with small margin
        y_pos = view_top_left.y() + 10
        
        self.format_toolbar.move(x_pos, y_pos)
        self.format_toolbar.show()
        self.format_toolbar.raise_()

    def update_font(self, font):
        if self.text_item:
            self.text_item.setFont(font)
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus()
            
    def update_size(self, size):
        if self.text_item:
            # Get view scale
            view = self.app.view
            view_scale = view.transform().m11()
            
            # Calculate scale factor based on view scale
            # When view_scale is small (zoomed out), we want text to be larger
            scale_factor = 1.0 / view_scale if view_scale < 1.0 else 1.0
            
            # Apply scaled font size
            font = self.text_item.font()
            font.setPointSize(int(size * scale_factor))
            self.text_item.setFont(font)
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus()
            
    def update_bold(self, bold):
        if self.text_item:
            font = self.text_item.font()
            font.setBold(bold)
            self.text_item.setFont(font)
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus()
            
    def update_italic(self, italic):
        if self.text_item:
            font = self.text_item.font()
            font.setItalic(italic)
            self.text_item.setFont(font)
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus()
            
    def update_color(self):
        if self.text_item:
            color = QColorDialog.getColor()
            if color.isValid():
                self.text_item.setDefaultTextColor(color)
                self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
                self.text_item.setFocus()

    def update_text_color(self, color):
        """Update text color when color palette changes"""
        if self.text_item and not self.text_item.finalized:
            # Update default text color
            self.text_item.setDefaultTextColor(color)
            
            # Update color in the document
            cursor = self.text_item.textCursor()
            format = cursor.charFormat()
            format.setForeground(color)
            cursor.select(QTextCursor.Document)
            cursor.mergeCharFormat(format)
            
            # Ensure text remains editable
            self.text_item.setTextInteractionFlags(Qt.TextEditorInteraction)
            self.text_item.setFocus() 